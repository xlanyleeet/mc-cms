{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/xlanyleeet/Desktop/mc-cms/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nexport const prisma = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE3D,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///Users/xlanyleeet/Desktop/mc-cms/lib/authOptions.ts"],"sourcesContent":["import { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { prisma } from \"@/lib/prisma\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport DiscordProvider from \"next-auth/providers/discord\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport type { NextAuthOptions } from \"next-auth\";\nimport bcrypt from \"bcryptjs\";\n\n// Розширимо типи для NextAuth\ndeclare module \"next-auth\" {\n  interface User {\n    role?: string;\n    id: string;\n  }\n  \n  interface Session {\n    user: {\n      id: string;\n      name?: string | null;\n      email?: string | null;\n      image?: string | null;\n      role?: string;\n    };\n  }\n}\n\n// Розширимо JWT типи\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    role?: string;\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n    DiscordProvider({\n      clientId: process.env.DISCORD_CLIENT_ID!,\n      clientSecret: process.env.DISCORD_CLIENT_SECRET!,\n    }),\n    CredentialsProvider({\n      id: \"credentials\",\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        const { email, password } = credentials ?? {};\n        \n        if (!email || !password) return null;\n        \n        const user = await prisma.user.findUnique({\n          where: { email },\n        });\n        \n        if (!user || !user.hashedPassword) return null;\n        \n        const isValid = await bcrypt.compare(password, user.hashedPassword);\n        \n        if (!isValid) return null;\n        \n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          role: user.role ?? \"user\",\n        };\n      },\n    }),\n  ],\n  secret: process.env.NEXTAUTH_SECRET,\n  session: {\n    strategy: \"jwt\", // Важливо вказати JWT як стратегію для правильної роботи колбеків\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      // Передаємо дані користувача в токен\n      if (user) {\n        token.role = user.role ?? \"user\";\n        token.sub = user.id; // Переконаємося, що ID правильно встановлено\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // Передаємо дані з токена в сесію\n      if (session.user) {\n        session.user.id = token.sub!;\n        session.user.role = token.role ?? \"user\";\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n  debug: process.env.NODE_ENV === \"development\", // Включаємо режим debug для розробки\n};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AA2BO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE,+GAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,CAAA,GAAA,sJAAA,CAAA,UAAe,AAAD,EAAE;YACd,UAAU,QAAQ,GAAG,CAAC,iBAAiB;YACvC,cAAc,QAAQ,GAAG,CAAC,qBAAqB;QACjD;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,IAAI;YACJ,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC;gBAE5C,IAAI,CAAC,SAAS,CAAC,UAAU,OAAO;gBAEhC,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE;oBAAM;gBACjB;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,cAAc,EAAE,OAAO;gBAE1C,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,cAAc;gBAElE,IAAI,CAAC,SAAS,OAAO;gBAErB,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI,IAAI;gBACrB;YACF;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,qCAAqC;YACrC,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI,IAAI;gBAC1B,MAAM,GAAG,GAAG,KAAK,EAAE,EAAE,6CAA6C;YACpE;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,kCAAkC;YAClC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,IAAI;YACpC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,OAAO,oDAAyB;AAClC","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///Users/xlanyleeet/Desktop/mc-cms/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// app/api/auth/[...nextauth]/route.ts\nimport NextAuth from \"next-auth\";\nimport { authOptions } from \"@/lib/authOptions\";\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };"],"names":[],"mappings":"AAAA,sCAAsC;;;;;AACtC;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,oHAAA,CAAA,cAAW","debugId":null}}]
}