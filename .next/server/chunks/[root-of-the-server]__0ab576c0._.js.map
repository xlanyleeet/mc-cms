{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/xlanyleeet/Desktop/mc-cms/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nexport const prisma = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE3D,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///Users/xlanyleeet/Desktop/mc-cms/lib/authOptions.ts"],"sourcesContent":["import { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { prisma } from \"@/lib/prisma\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport DiscordProvider from \"next-auth/providers/discord\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport type { NextAuthOptions } from \"next-auth\";\nimport bcrypt from \"bcryptjs\";\n\n// Розширимо типи для NextAuth\ndeclare module \"next-auth\" {\n  interface User {\n    role?: string;\n    id: string;\n  }\n  \n  interface Session {\n    user: {\n      id: string;\n      name?: string | null;\n      email?: string | null;\n      image?: string | null;\n      role?: string;\n    };\n  }\n}\n\n// Розширимо JWT типи\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    role?: string;\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n    DiscordProvider({\n      clientId: process.env.DISCORD_CLIENT_ID!,\n      clientSecret: process.env.DISCORD_CLIENT_SECRET!,\n    }),\n    CredentialsProvider({\n      id: \"credentials\",\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        const { email, password } = credentials ?? {};\n        \n        if (!email || !password) return null;\n        \n        const user = await prisma.user.findUnique({\n          where: { email },\n        });\n        \n        if (!user || !user.hashedPassword) return null;\n        \n        const isValid = await bcrypt.compare(password, user.hashedPassword);\n        \n        if (!isValid) return null;\n        \n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          role: user.role ?? \"user\",\n        };\n      },\n    }),\n  ],\n  secret: process.env.NEXTAUTH_SECRET,\n  session: {\n    strategy: \"jwt\", // Важливо вказати JWT як стратегію для правильної роботи колбеків\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      // Передаємо дані користувача в токен\n      if (user) {\n        token.role = user.role ?? \"user\";\n        token.sub = user.id; // Переконаємося, що ID правильно встановлено\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // Передаємо дані з токена в сесію\n      if (session.user) {\n        session.user.id = token.sub!;\n        session.user.role = token.role ?? \"user\";\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n  debug: process.env.NODE_ENV === \"development\", // Включаємо режим debug для розробки\n};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AA2BO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE,+GAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,CAAA,GAAA,sJAAA,CAAA,UAAe,AAAD,EAAE;YACd,UAAU,QAAQ,GAAG,CAAC,iBAAiB;YACvC,cAAc,QAAQ,GAAG,CAAC,qBAAqB;QACjD;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,IAAI;YACJ,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC;gBAE5C,IAAI,CAAC,SAAS,CAAC,UAAU,OAAO;gBAEhC,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE;oBAAM;gBACjB;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,cAAc,EAAE,OAAO;gBAE1C,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,cAAc;gBAElE,IAAI,CAAC,SAAS,OAAO;gBAErB,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI,IAAI;gBACrB;YACF;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,qCAAqC;YACrC,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI,IAAI;gBAC1B,MAAM,GAAG,GAAG,KAAK,EAAE,EAAE,6CAA6C;YACpE;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,kCAAkC;YAClC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,IAAI;YACpC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,OAAO,oDAAyB;AAClC","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///Users/xlanyleeet/Desktop/mc-cms/app/api/user/update-profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/authOptions';\nimport { prisma } from '@/lib/prisma';\nimport bcrypt from 'bcryptjs';\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Перевіряємо, чи користувач авторизований\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { message: 'Не авторизовано' },\n        { status: 401 }\n      );\n    }\n\n    // Отримуємо дані з запиту\n    const { name, email, currentPassword, newPassword } = await req.json();\n\n    // Знаходимо користувача в базі даних за ID\n    const user = await prisma.user.findUnique({\n      where: { id: session.user.id },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { message: 'Користувача не знайдено' },\n        { status: 404 }\n      );\n    }\n\n    // Підготовка даних для оновлення\n    const updateData: any = {};\n\n    // Оновлення імені (якщо змінено)\n    if (name && name !== user.name) {\n      updateData.name = name;\n    }\n\n    // Оновлення email (якщо змінено)\n    if (email && email !== user.email) {\n      // Перевіряємо, чи new email вже використовується\n      const existingUser = await prisma.user.findUnique({\n        where: { email },\n      });\n\n      if (existingUser && existingUser.id !== user.id) {\n        return NextResponse.json(\n          { message: 'Ця електронна пошта вже використовується' },\n          { status: 400 }\n        );\n      }\n\n      updateData.email = email;\n    }\n\n    // Перевіряємо та оновлюємо пароль\n    if (newPassword) {\n      // Якщо намагаємося змінити пароль, необхідно перевірити поточний пароль\n      if (!currentPassword || !user.hashedPassword) {\n        return NextResponse.json(\n          { message: 'Потрібен поточний пароль для зміни пароля' },\n          { status: 400 }\n        );\n      }\n\n      // Перевіряємо, чи поточний пароль правильний\n      const isPasswordValid = await bcrypt.compare(\n        currentPassword,\n        user.hashedPassword\n      );\n\n      if (!isPasswordValid) {\n        return NextResponse.json(\n          { message: 'Поточний пароль невірний' },\n          { status: 400 }\n        );\n      }\n\n      // Хешуємо новий пароль\n      const hashedPassword = await bcrypt.hash(newPassword, 12);\n      updateData.hashedPassword = hashedPassword;\n    }\n\n    // Якщо немає змін, повертаємо помилку\n    if (Object.keys(updateData).length === 0) {\n      return NextResponse.json(\n        { message: 'Немає даних для оновлення' },\n        { status: 400 }\n      );\n    }\n\n    // Оновлюємо дані користувача\n    await prisma.user.update({\n      where: { id: user.id },\n      data: updateData,\n    });\n\n    return NextResponse.json(\n      { message: 'Профіль успішно оновлено' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Помилка при оновленні профілю:', error);\n    return NextResponse.json(\n      { message: 'Помилка сервера при оновленні профілю' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,2CAA2C;QAC3C,MAAM,UAAU,MAAM,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE,oHAAA,CAAA,cAAW;QAClD,IAAI,CAAC,SAAS,MAAM;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAkB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,eAAe,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,IAAI;QAEpE,2CAA2C;QAC3C,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,IAAI,QAAQ,IAAI,CAAC,EAAE;YAAC;QAC/B;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA0B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,iCAAiC;QACjC,MAAM,aAAkB,CAAC;QAEzB,iCAAiC;QACjC,IAAI,QAAQ,SAAS,KAAK,IAAI,EAAE;YAC9B,WAAW,IAAI,GAAG;QACpB;QAEA,iCAAiC;QACjC,IAAI,SAAS,UAAU,KAAK,KAAK,EAAE;YACjC,iDAAiD;YACjD,MAAM,eAAe,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAChD,OAAO;oBAAE;gBAAM;YACjB;YAEA,IAAI,gBAAgB,aAAa,EAAE,KAAK,KAAK,EAAE,EAAE;gBAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,SAAS;gBAA2C,GACtD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,WAAW,KAAK,GAAG;QACrB;QAEA,kCAAkC;QAClC,IAAI,aAAa;YACf,wEAAwE;YACxE,IAAI,CAAC,mBAAmB,CAAC,KAAK,cAAc,EAAE;gBAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,SAAS;gBAA4C,GACvD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,6CAA6C;YAC7C,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,iBACA,KAAK,cAAc;YAGrB,IAAI,CAAC,iBAAiB;gBACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,SAAS;gBAA2B,GACtC;oBAAE,QAAQ;gBAAI;YAElB;YAEA,uBAAuB;YACvB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,aAAa;YACtD,WAAW,cAAc,GAAG;QAC9B;QAEA,sCAAsC;QACtC,IAAI,OAAO,IAAI,CAAC,YAAY,MAAM,KAAK,GAAG;YACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA4B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,OAAO;gBAAE,IAAI,KAAK,EAAE;YAAC;YACrB,MAAM;QACR;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA2B,GACtC;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwC,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}